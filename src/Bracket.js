import { TModel } from "./TModel.js";
import { Viewport } from "./Viewport.js";

/**
 * Represents a node in a tree generated by the BracketGenerator from a large list,
 * used to restrict calculations to only the visible branches.
 */
class Bracket extends TModel {
    constructor(parent) {
        super("BI", {
            canHaveDom: false,
            outerOverflowWidth: 0
        });

        this.innerContentWidth = 0;
        this.innerContentHeight = 0;
        
        this.parent = parent;
        this.newFlag = true;
    }

    shouldBeBracketed() {
        return false;
    }

    getWidth() {
        return Math.max(10, this.getContentWidth());
    }

    getHeight() {
        return Math.max(10, this.getContentHeight());
    }

    getInnerWidth() {
        return this.innerContentWidth;
    }

    getInnerOverflowWidth() {
        return this.getRealParent().getInnerOverflowWidth();
    }

    getInnerContentHeight() {
        return this.innerContentHeight;
    }

    isVisible() {
        return this.visibilityStatus.top && this.visibilityStatus.bottom;
    }
    
    addToParentVisibleChildren() {}

    createViewport() {
        this.viewport = this.viewport || new Viewport();

        this.viewport.xNext = this.x;
        this.viewport.xNorth = this.x;
        this.viewport.xEast = this.x;
        this.viewport.xSouth = this.x;
        this.viewport.xWest = this.x;
        
        this.viewport.xOverflow = this.getRealParent().getX();       

        this.viewport.yNext = this.y;
        this.viewport.yNorth = this.y;
        this.viewport.yWest = this.y;
        this.viewport.yEast = this.y;
        this.viewport.ySouth = this.getRealParent().viewport.ySouth;

        return this.viewport;   
    }
   
    getRealParent() {
        return this.realParent;
    }
    
    calculateAbsolutePosition(x, y) {
        this.absX = x + this.getRealParent().absX;
        this.absY = y + this.getRealParent().absY;
    }

    shouldCalculateChildren() {
        const result = this.isVisible() || this.newFlag;
        this.newFlag = false;
        return result;
    }
    
    getChildren() {
        return this.allChildren;
    }
    
    calcContentWidthHeight() {
        this.contentHeight = this.viewport.ySouth - this.viewport.yNorth;
        this.innerContentHeight = this.viewport.yEast - this.viewport.yNorth;
        this.innerContentWidth = this.viewport.xSouth - this.viewport.xWest;
        this.contentWidth = this.viewport.xEast - this.viewport.xWest;
    }

}

export { Bracket };
