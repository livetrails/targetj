import { TModel } from "./TModel.js";
import { TUtil } from "./TUtil.js";

/**
 * Represents a node in a tree generated by the BracketGenerator from a large list,
 * used to restrict calculations to only the visible branches.
 */
class Bracket extends TModel {
    constructor(parent) {
        super("BI", {
            canHaveDom: false,
            outerOverflowWidth: 0
        });

        this.innerContentWidth = 0;
        this.innerContentHeight = 0;
        
        this.parent = parent;
        this.newFlag = true;
    }
    
    shouldBeBracketed() {
        return false;
    }

    getWidth() {
        return this.getContentWidth();
    }

    getHeight() {
        return this.getContentHeight();
    }

    getInnerWidth() {
        return this.innerContentWidth;
    }

    getInnerOverflowWidth() {
        return this.getRealParent().getInnerOverflowWidth();
    }

    getInnerContentHeight() {
        return this.innerContentHeight;
    }

    getScrollTop() {
        return this.getRealParent().getScrollTop();
    }

    getScrollLeft() {
        return this.getRealParent().getScrollLeft();
    }

    getBoundingRect() {
        return TUtil.getBoundingRect(this.getRealParent());
    }
    
    calculateAbsolutePosition(x, y) {
        const rect = this.getBoundingRect();
        this.absX = rect.left + x;
        this.absY = rect.top + y;
    }

    isVisible() {
        return this.visibilityStatus.top && this.visibilityStatus.bottom;
    }

    addToUpdatingChildren(child) {
        this.getRealParent().addToUpdatingChildren(child);
    }
    
    addToParentVisibleChildren() {}

    createViewport() {
        return this.getRealParent().createViewport.call(this);
    }

    getRealParent() {
        return this.realParent;
    }

    shouldCalculateChildren() {
        const result = this.isVisible() || this.newFlag;
        this.newFlag = false;
        return result;
    }
    
    indexRange() {
        return [this.startIndex, this.endIndex];
    }

    getChildren() {
        return this.allChildren;
    }
    
    calcContentWidthHeight() {
        this.contentHeight = this.viewport.ySouth - this.viewport.yNorth;
        this.innerContentHeight = this.viewport.yEast - this.viewport.yNorth;
        this.innerContentWidth = this.viewport.xSouth - this.viewport.xWest;
        this.contentWidth = this.viewport.xEast - this.viewport.xWest;
    }

    addToParentVisibleList() {}
}

export { Bracket };
